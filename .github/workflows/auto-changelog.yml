# Auto-update changelog and version on merge to master
# This workflow automatically increments the version, updates changelog, and commits changes
name: Auto Changelog Update

# Add concurrency group to ensure sequential execution
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches:
      - master
      - main # Support both master and main branch names

# Security: Limit permissions to minimum required
permissions:
  contents: write
  pull-requests: read

jobs:
  update-changelog:
    runs-on: ubuntu-latest

    # Skip if commit message contains [skip-changelog] or if it's already a version commit
    if: "!contains(github.event.head_commit.message, '[skip-changelog]') && !contains(github.event.head_commit.message, 'chore: update version and changelog')"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history to get commit details
          fetch-depth: 0
          # Use GitHub token for authentication
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Configure Git
        run: |
          # Configure git with GitHub Actions bot credentials
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Pull latest changes from master
        run: |
          git fetch origin master
          git merge origin/master --no-edit

      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps

      - name: Get PR title and author (via GitHub API)
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const commitSha = context.sha;

            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha,
            });

            if (prs.data.length > 0) {
              const pr = prs.data[0];
              core.setOutput('pr_title', pr.title);
              core.setOutput('author', pr.user.login);
            } else {
              core.setOutput('pr_title', context.payload.head_commit.message);
              core.setOutput('author', context.payload.head_commit.author?.name || 'unknown');
            }

      - name: Get previous commit
        id: prev_commit
        run: |
          # Get the last commit that updated version and changelog
          PREV_COMMIT=$(git log --grep="^chore: update version and changelog to " --format="%H" -1)
          if [ -z "$PREV_COMMIT" ]; then
            # If no previous version commit found, use the first commit
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_commit=$PREV_COMMIT" >> $GITHUB_OUTPUT
          echo "Previous version commit: $PREV_COMMIT"

      - name: Read current version from package.json
        id: current_version
        run: |
          # Extract current version using jq for safe JSON parsing
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Run version upgrade script
        id: upgrade_version
        run: |
          # Determine version type based on PR title
          PR_TITLE="${{ steps.pr_info.outputs.pr_title }}"

          # Check for minor version indicator in PR title
          if [[ "$PR_TITLE" =~ \[minor-upgrade\] ]]; then
            VERSION_TYPE="minor"
            echo "Minor version upgrade detected in PR title"
          else
            VERSION_TYPE="patch"
            echo "Defaulting to patch version"
          fi

          echo "Determined version type: $VERSION_TYPE"
          node upgrade_version.js $VERSION_TYPE
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update changelog
        run: |
          # Prepare changelog entry variables
          NEW_VERSION="${{ steps.upgrade_version.outputs.version }}"
          GIT_SHA="${{ github.sha }}"
          SHORT_SHA="${GIT_SHA:0:7}"
          AUTHOR="${{ steps.pr_info.outputs.author }}"
          PR_TITLE="${{ steps.pr_info.outputs.pr_title }}"
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          # Create changelog entry
          CHANGELOG_ENTRY="## [$NEW_VERSION]
          ***Date:*** $CURRENT_DATE

          ***Author:*** $AUTHOR

          ***Commit:*** [$SHORT_SHA](https://github.com/${{ github.repository }}/commit/$GIT_SHA)

          **Message:** $PR_TITLE
          ___

          "

          # Create temporary file with new entry
          echo "$CHANGELOG_ENTRY" > changelog_temp.md

          # Append the new content at the top, after the header
          sed -i '4r changelog_temp.md' CHANGELOG.md

          # Clean up temporary file
          rm changelog_temp.md

          echo "Updated CHANGELOG.md with new version entry"

      - name: Commit and push changes
        run: |
          # Add the modified files
          git add .

          # Get PR title and determine if it's a minor upgrade
          PR_TITLE="${{ steps.pr_info.outputs.pr_title }}"
          NEW_VERSION="${{ steps.upgrade_version.outputs.version }}"

          # Commit changes with descriptive message
          git commit -m "chore: update version and changelog to $NEW_VERSION [skip-changelog]" --no-verify

          # Push changes back to the repository
          git push origin ${{ github.ref_name }}

          # Create and push tag only for minor upgrades
          if [[ "$PR_TITLE" =~ \[minor-upgrade\] ]]; then
            echo "Minor upgrade detected - creating tag"
            # Get the previous tag
            PREV_TAG=$(git describe --tags --abbrev=0 "v$NEW_VERSION^" 2>/dev/null || echo "v0.0.0")
            echo "Previous tag: $PREV_TAG"
            
            # Create and push a git tag for the new version
            git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION"
            git push origin "v$NEW_VERSION"
            echo "Created and pushed tag v$NEW_VERSION"
          else
            echo "Not a minor upgrade - skipping tag creation"
          fi

          echo "Successfully committed and pushed version $NEW_VERSION"
      - name: Send Slack notification
        run: |
          # Set environment
          PR_TITLE="${{ steps.pr_info.outputs.pr_title }}"
          REPO_NAME="${{ github.repository }}"
          NEW_VERSION="${{ steps.upgrade_version.outputs.version }}"
          GIT_SHA="${{ github.sha }}"
          SHORT_SHA="${GIT_SHA:0:7}"

          # Optional button logic
          VIEW_RELEASE_BUTTON=""
          if [[ "$PR_TITLE" =~ \[minor-upgrade\] ]]; then
            VIEW_RELEASE_BUTTON='{
              "type": "button",
              "text": {
                "type": "plain_text",
                "text": "View Release"
              },
              "url": "https://github.com/'"$REPO_NAME"'/releases/tag/v'"$NEW_VERSION"'",
              "style": "primary"
            },'
          fi

          # Final Slack payload using expanded heredoc
          SLACK_PAYLOAD=$(cat <<EOF
      {
        "text": "ðŸš€ New version released: v$NEW_VERSION",
        "blocks": [
          {
            "type": "header",
            "text": {
              "type": "plain_text",
              "text": "ðŸš€ Ordering App Release â€¢ v$NEW_VERSION"
            }
          },
          {
            "type": "section",
            "fields": [
              {
                "type": "mrkdwn",
                "text": "*Version:*\nv$NEW_VERSION"
              },
              {
                "type": "mrkdwn",
                "text": "*Author:*\n${{ github.event.head_commit.author.name }}"
              },
              {
                "type": "mrkdwn",
                "text": "*Repository:*\n$REPO_NAME"
              },
              {
                "type": "mrkdwn",
                "text": "*Commit:*\n<https://github.com/$REPO_NAME/commit/$GIT_SHA|$SHORT_SHA>"
              },
              {
                "type": "mrkdwn",
                "text": "*PR Title:*\n$PR_TITLE"
              }
            ]
          },
          {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": "..."
            }
          },
          {
            "type": "actions",
            "elements": [
              $VIEW_RELEASE_BUTTON
              {
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "View Changelog"
                },
                "url": "https://github.com/$REPO_NAME/blob/master/CHANGELOG.md"
              },
              {
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "View Commit"
                },
                "url": "https://github.com/$REPO_NAME/commit/$GIT_SHA"
              }
            ]
          }
        ]
      }
        EOF
        )

    # Send to Slack
    curl -X POST -H 'Content-type: application/json' \
      --data "$SLACK_PAYLOAD" \
      ${{ secrets.SLACK_WEBHOOK_URL }}
  # Optional: Create a GitHub release
  create-release:
    needs: update-changelog
    runs-on: ubuntu-latest
    if: |
      success() && 
      contains(github.event.head_commit.message, '[minor-upgrade]')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Get new version
        id: get_version
        run: |
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Get previous version commit
        id: prev_commit
        run: |
          # Get the last commit that updated version and changelog
          PREV_COMMIT=$(git log --grep="^chore: update version and changelog to " --format="%H" -1)
          if [ -z "$PREV_COMMIT" ]; then
            # If no previous version commit found, use the first commit
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_commit=$PREV_COMMIT" >> $GITHUB_OUTPUT
          echo "Previous version commit: $PREV_COMMIT"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## Changes
            Check the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md) for detailed changes.

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.prev_commit.outputs.prev_commit }}...${{ github.sha }}
          draft: false
          prerelease: false

  slack-failure:
    name: Send Slack Notification on Failure
    if: failure()
    runs-on: ubuntu-latest
    needs: [update-changelog, create-release]

    steps:
      - name: Send failure notification to Slack
        run: |
          PROJECT_TAG="ðŸ’© Ordering App CI/CD Failed"
          GIT_SHA="${{ github.sha }}"
          SHORT_SHA="${GIT_SHA:0:7}"
          REPO_NAME="${{ github.repository }}"
          RUN_URL="https://github.com/${REPO_NAME}/actions/runs/${{ github.run_id }}"
          BRANCH="${{ github.ref_name }}"

          SLACK_PAYLOAD=$(cat <<EOF
          {
            "text": "${PROJECT_TAG}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${PROJECT_TAG}"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${REPO_NAME}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n${BRANCH}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n<https://github.com/${REPO_NAME}/commit/${GIT_SHA}|${SHORT_SHA}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Workflow Run:*\n<${RUN_URL}|View Failed Run>"
                  }
                ]
              }
            ]
          }
          EOF
          )

          curl -X POST -H 'Content-type: application/json' \
            --data "${SLACK_PAYLOAD}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
